#!/usr/bin/env bash

function export_aws_env() {
	if export_output=$(aws configure export-credentials --profile "$1" --format env 2>/dev/null); then
		eval "$export_output"
		echo "AWS environment variables exported"
	else
		echo "Failed to export AWS environment variables" >&2
		return 1
	fi
}

PROFILE="$1"

# Case 1: Already authenticated
if aws sts get-caller-identity --profile "$PROFILE" >/dev/null 2>&1; then
	echo "Already authenticated with profile: $PROFILE"
	export_aws_env "$PROFILE"
	return $?
fi

# Case 2: Kick off SSO login
echo "Logging in with profile: $PROFILE"
aws sso login --profile "$PROFILE" &

# Remember the frontmost app so we can switch back later
CURRENT_APP=$(osascript -e 'return short name of (info for (path to frontmost application))')

# Wait for Arc to come to the front
osascript <<EOF
tell application "System Events"
    repeat until (name of first application process whose frontmost is true) is "Arc"
        delay 0.125
    end repeat
end tell
EOF

# In Arc, wait for load + handle both flows
osascript <<EOF
tell application "Arc"
    -- 1) wait for the tab to finish loading
    repeat until (loading of front window's active tab) is false
        delay 0.125
    end repeat

    -- 2) poll until either the allow-access button OR the approved marker shows up
    set allowFound to false
    set approvedFound to false
    repeat until (allowFound or approvedFound)
        delay 0.125
        tell front window's active tab
            set allowFound    to (execute javascript "!!document.querySelector('[data-testid=\"allow-access-button\"]')") as boolean
            set approvedFound to (execute javascript "!!document.getElementById('approved-auth')") as boolean
        end tell
    end repeat

    -- 3) if we saw the button, click it, then wait for the “approved” marker
    if allowFound then
        tell front window's active tab
            execute javascript "document.querySelector('[data-testid=\"allow-access-button\"]').click();"
        end tell
        repeat until approvedFound
            delay 0.125
            tell front window's active tab
                set approvedFound to (execute javascript "!!document.getElementById('approved-auth')") as boolean
            end tell
        end repeat
    end if

    -- 4) close the SSO tab
    tell front window
        close active tab
    end tell
end tell
EOF

# 5) wait for aws sso login to actually finish
wait

# 6) restore your previous frontmost app
osascript -e "tell application \"$CURRENT_APP\" to activate"

# 7) make sure the login really worked, and export creds
if ! aws sts get-caller-identity --profile "$PROFILE" >/dev/null 2>&1; then
	echo "SSO login failed" >&2
	return 1
fi

export_aws_env "$PROFILE"
