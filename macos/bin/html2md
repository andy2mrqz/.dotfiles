#!/bin/bash -l

# TODO: Support tables (maybe switch to turndown.js)
# TODO: Use alt-text instead of base64 images if present

# Required parameters:
# @raycast.schemaVersion 1
# @raycast.title html2md
# @raycast.mode silent

# Optional parameters:
# @raycast.icon üñãÔ∏è

# Documentation:
# @raycast.author Andrew Marquez

# Use AppleScript to get the active URL first
active_url=$(osascript -e 'tell application "Arc"
    tell the active tab of its first window
        set theURL to URL
    end tell
end tell')

# Set the JavaScript code based on the URL
case "$active_url" in
	*twitter.com* | *x.com*)
		# Twitter/X specific selector
		js_code="
            const primaryColumn = document.querySelector('[data-testid=primaryColumn]');
            primaryColumn ? primaryColumn.outerHTML : document.body.outerHTML;
        "
		;;
	*github.com*)
		# GitHub specific selector
		js_code="
            const repoContainer = document.getElementById('js-repo-pjax-container');
            repoContainer ? repoContainer.outerHTML : document.body.outerHTML;
        "
		;;
	*snowflake.com*)
		# Snowflake specific selector
		js_code="
            const mainContent = document.getElementById('scrolltarget');
            mainContent ? mainContent.outerHTML : document.body.outerHTML;
    "
		;;
	*)
		# Prompt for CSS selector
		bash "$HOME/bin/css-selector"
		js_code="document.querySelector('$(pbpaste)').outerHTML;"
		echo "$js_code"
		;;
esac

# Get the HTML using the appropriate selector
body_html=$(osascript -e "tell application \"Arc\"
    tell the active tab of its first window
        execute javascript \"$js_code\"
    end tell
end tell")

# Check if we got HTML content
if [[ -z $body_html ]]; then
	echo "üö® Error: Could not retrieve HTML body."
	exit 1
fi

# Decode Unicode escape sequences using Python
cleaned_html=$(echo "$body_html" | python3 -c "import sys; import json; print(json.loads(sys.stdin.read()))")

# Convert HTML to Markdown using htmd
converted_md=$(echo "$cleaned_html" | htmd --ignored-tags "head,script,style,noscript")

# Check if the conversion was successful
if [[ -z $converted_md ]]; then
	echo "üö® Error: Failed to convert HTML to Markdown."
	exit 1
fi

# Copy the converted Markdown to clipboard
echo "$converted_md" | pbcopy

# Print confirmation message
echo "üéâ html2md - copied to clipboard."
